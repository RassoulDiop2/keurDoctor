#!/bin/bash

# Script de d√©ploiement du th√®me Keycloak CHIFT
# Usage: ./deploy-theme.sh [dev|prod]

set -e

# Configuration
THEME_NAME="chift-theme"
THEME_DIR="keycloak-themes/$THEME_NAME"
KEYCLOAK_CONTAINER="keycloak"  # Nom du conteneur Docker
KEYCLOAK_THEMES_DIR="/opt/keycloak/themes"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si le th√®me existe
check_theme_exists() {
    if [ ! -d "$THEME_DIR" ]; then
        log_error "Le dossier du th√®me $THEME_DIR n'existe pas!"
        exit 1
    fi
    log_success "Th√®me trouv√© dans $THEME_DIR"
}

# V√©rifier si Docker est disponible
check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√© ou n'est pas disponible"
        exit 1
    fi
    log_success "Docker est disponible"
}

# V√©rifier si le conteneur Keycloak existe et fonctionne
check_keycloak_container() {
    if ! docker ps | grep -q "$KEYCLOAK_CONTAINER"; then
        log_error "Le conteneur Keycloak '$KEYCLOAK_CONTAINER' n'est pas en cours d'ex√©cution"
        log_info "D√©marrage du conteneur..."
        docker-compose up -d keycloak
        sleep 10
    fi
    log_success "Conteneur Keycloak '$KEYCLOAK_CONTAINER' est actif"
}

# Copier le th√®me dans le conteneur
deploy_theme() {
    log_info "Copie du th√®me dans le conteneur Keycloak..."
    
    # Cr√©er le dossier themes si n√©cessaire
    docker exec "$KEYCLOAK_CONTAINER" mkdir -p "$KEYCLOAK_THEMES_DIR" 2>/dev/null || true
    
    # Copier le th√®me
    docker cp "$THEME_DIR" "$KEYCLOAK_CONTAINER:$KEYCLOAK_THEMES_DIR/"
    
    # V√©rifier les permissions
    docker exec "$KEYCLOAK_CONTAINER" chown -R keycloak:keycloak "$KEYCLOAK_THEMES_DIR/$THEME_NAME"
    
    log_success "Th√®me copi√© avec succ√®s!"
}

# Configuration pour le d√©veloppement
configure_dev() {
    log_info "Configuration pour l'environnement de d√©veloppement..."
    
    # Variables d'environnement pour d√©sactiver le cache
    cat << EOF >> .env.dev
KC_SPI_THEME_STATIC_MAX_AGE=-1
KC_SPI_THEME_CACHE_THEMES=false
KC_SPI_THEME_CACHE_TEMPLATES=false
KC_LOG_LEVEL=INFO
EOF
    
    log_success "Configuration de d√©veloppement appliqu√©e"
    log_warning "Red√©marrez Keycloak pour appliquer les changements de cache"
}

# Configuration pour la production
configure_prod() {
    log_info "Configuration pour l'environnement de production..."
    
    # Variables d'environnement pour activer le cache
    cat << EOF >> .env.prod
KC_SPI_THEME_STATIC_MAX_AGE=31536000
KC_SPI_THEME_CACHE_THEMES=true
KC_SPI_THEME_CACHE_TEMPLATES=true
KC_LOG_LEVEL=WARN
EOF
    
    log_success "Configuration de production appliqu√©e"
}

# V√©rifier le d√©ploiement
verify_deployment() {
    log_info "V√©rification du d√©ploiement..."
    
    if docker exec "$KEYCLOAK_CONTAINER" test -d "$KEYCLOAK_THEMES_DIR/$THEME_NAME"; then
        log_success "Th√®me d√©ploy√© avec succ√®s dans le conteneur"
        
        # Lister les fichiers du th√®me
        log_info "Contenu du th√®me d√©ploy√©:"
        docker exec "$KEYCLOAK_CONTAINER" find "$KEYCLOAK_THEMES_DIR/$THEME_NAME" -type f | head -10
    else
        log_error "√âchec du d√©ploiement du th√®me"
        exit 1
    fi
}

# Red√©marrer Keycloak
restart_keycloak() {
    log_info "Red√©marrage de Keycloak..."
    docker-compose restart keycloak
    
    # Attendre que Keycloak soit pr√™t
    log_info "Attente du d√©marrage de Keycloak..."
    sleep 30
    
    # V√©rifier si Keycloak r√©pond
    if docker exec "$KEYCLOAK_CONTAINER" curl -f http://localhost:8080/health/ready 2>/dev/null; then
        log_success "Keycloak est pr√™t!"
    else
        log_warning "Keycloak met du temps √† d√©marrer, veuillez patienter..."
    fi
}

# Fonction d'aide
show_help() {
    cat << EOF
Usage: $0 [ENVIRONMENT] [OPTIONS]

ENVIRONMENT:
    dev     D√©ploiement pour d√©veloppement (cache d√©sactiv√©)
    prod    D√©ploiement pour production (cache activ√©)

OPTIONS:
    --no-restart    Ne pas red√©marrer Keycloak apr√®s le d√©ploiement
    --verify-only   V√©rifier uniquement le d√©ploiement existant
    --help         Afficher cette aide

Exemples:
    $0 dev                    # D√©ploiement d√©veloppement avec red√©marrage
    $0 prod --no-restart      # D√©ploiement production sans red√©marrage
    $0 --verify-only          # V√©rification uniquement

EOF
}

# Variables
ENVIRONMENT=""
NO_RESTART=false
VERIFY_ONLY=false

# Traitement des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        dev|prod)
            ENVIRONMENT="$1"
            shift
            ;;
        --no-restart)
            NO_RESTART=true
            shift
            ;;
        --verify-only)
            VERIFY_ONLY=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Script principal
main() {
    log_info "üöÄ D√©marrage du d√©ploiement du th√®me Keycloak CHIFT"
    
    # V√©rifications pr√©liminaires
    check_docker
    check_theme_exists
    
    if [ "$VERIFY_ONLY" = true ]; then
        check_keycloak_container
        verify_deployment
        exit 0
    fi
    
    check_keycloak_container
    
    # D√©ploiement
    deploy_theme
    
    # Configuration selon l'environnement
    case $ENVIRONMENT in
        dev)
            configure_dev
            ;;
        prod)
            configure_prod
            ;;
        "")
            log_warning "Aucun environnement sp√©cifi√©, utilisation des param√®tres par d√©faut"
            ;;
    esac
    
    # V√©rification
    verify_deployment
    
    # Red√©marrage conditionnel
    if [ "$NO_RESTART" = false ]; then
        restart_keycloak
    else
        log_info "Red√©marrage ignor√© (--no-restart)"
    fi
    
    # Messages finaux
    echo
    log_success "‚úÖ D√©ploiement termin√© avec succ√®s!"
    echo
    log_info "üìã Prochaines √©tapes:"
    echo "   1. Connectez-vous √† la console d'administration Keycloak"
    echo "   2. Allez dans 'Realm Settings' > 'Themes'"
    echo "   3. S√©lectionnez '$THEME_NAME' pour 'Login Theme'"
    echo "   4. Cliquez sur 'Save'"
    echo
    log_info "üåê Console d'administration: http://localhost:8080/admin"
    echo
}

# Ex√©cution du script principal
main "$@"
