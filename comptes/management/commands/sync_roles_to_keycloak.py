from django.core.management.base import BaseCommand
from django.conf import settings
from comptes.models import Utilisateur
from comptes.views import sync_role_to_keycloak
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Synchronise tous les r√¥les Django vers Keycloak'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche ce qui serait fait sans effectuer les modifications',
        )
        parser.add_argument(
            '--user-email',
            type=str,
            help='Synchronise uniquement l\'utilisateur avec cet email',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force la synchronisation m√™me en cas d\'erreur',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        user_email = options['user_email']
        force = options['force']

        self.stdout.write(
            self.style.SUCCESS('üîÑ D√©but de la synchronisation des r√¥les Django vers Keycloak')
        )

        if dry_run:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  Mode DRY-RUN activ√© - Aucune modification ne sera effectu√©e')
            )

        # Filtrer les utilisateurs
        if user_email:
            users = Utilisateur.objects.filter(email=user_email)
            if not users.exists():
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Utilisateur avec l\'email {user_email} non trouv√©')
                )
                return
        else:
            users = Utilisateur.objects.filter(role_autorise__isnull=False)

        total_users = users.count()
        success_count = 0
        error_count = 0

        self.stdout.write(f'üìä {total_users} utilisateur(s) √† synchroniser')

        for i, user in enumerate(users, 1):
            self.stdout.write(f'\n[{i}/{total_users}] Traitement de {user.email}...')
            
            if dry_run:
                self.stdout.write(
                    f'   üîç R√¥le actuel: {user.role_autorise or "Aucun"}'
                )
                continue

            try:
                # Synchroniser le r√¥le
                success = sync_role_to_keycloak(user, user.role_autorise)
                
                if success:
                    self.stdout.write(
                        self.style.SUCCESS(f'   ‚úÖ Synchronisation r√©ussie pour {user.email} (r√¥le: {user.role_autorise})')
                    )
                    success_count += 1
                else:
                    self.stdout.write(
                        self.style.ERROR(f'   ‚ùå √âchec de synchronisation pour {user.email}')
                    )
                    error_count += 1
                    
                    if not force:
                        self.stdout.write(
                            self.style.WARNING('   ‚ö†Ô∏è  Arr√™t en cas d\'erreur (utilisez --force pour continuer)')
                        )
                        break

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'   üí• Erreur lors de la synchronisation de {user.email}: {e}')
                )
                error_count += 1
                
                if not force:
                    self.stdout.write(
                        self.style.WARNING('   ‚ö†Ô∏è  Arr√™t en cas d\'erreur (utilisez --force pour continuer)')
                    )
                    break

        # R√©sum√© final
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('üìã R√âSUM√â DE LA SYNCHRONISATION'))
        self.stdout.write('='*50)
        
        if dry_run:
            self.stdout.write(f'üîç Mode DRY-RUN: {total_users} utilisateur(s) auraient √©t√© trait√©s')
        else:
            self.stdout.write(f'‚úÖ Succ√®s: {success_count}')
            self.stdout.write(f'‚ùå Erreurs: {error_count}')
            self.stdout.write(f'üìä Total trait√©: {success_count + error_count}/{total_users}')
            
            if error_count == 0:
                self.stdout.write(
                    self.style.SUCCESS('üéâ Toutes les synchronisations ont r√©ussi !')
                )
            elif success_count > 0:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è  {error_count} erreur(s) sur {total_users} utilisateur(s)')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('üí• Aucune synchronisation n\'a r√©ussi')
                )

        # Conseils en cas d'erreur
        if error_count > 0 and not dry_run:
            self.stdout.write('\nüí° CONSEILS EN CAS D\'ERREUR:')
            self.stdout.write('   1. V√©rifiez que Keycloak est d√©marr√© et accessible')
            self.stdout.write('   2. V√©rifiez les credentials admin dans settings.py')
            self.stdout.write('   3. V√©rifiez que les r√¥les existent dans Keycloak')
            self.stdout.write('   4. Utilisez --force pour continuer malgr√© les erreurs')
            self.stdout.write('   5. Consultez les logs Django pour plus de d√©tails') 