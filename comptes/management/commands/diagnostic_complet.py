"""
Script de diagnostic complet pour le syst√®me KeurDoctor
V√©rifie l'√©tat des corrections apport√©es
"""
from django.core.management.base import BaseCommand
from django.contrib.auth.models import AnonymousUser
from django.test import RequestFactory
from comptes.models import AuditLog, Utilisateur
import subprocess
import sys
import os


class Command(BaseCommand):
    help = 'Diagnostic complet du syst√®me KeurDoctor apr√®s corrections'
    
    def handle(self, *args, **options):
        self.stdout.write("=" * 80)
        self.stdout.write(self.style.SUCCESS("üè• DIAGNOSTIC SYST√àME KEURDOCTOR - POST CORRECTIONS"))
        self.stdout.write("=" * 80)
        
        # 1. Test correction AuditLog
        self.test_auditlog_correction()
        
        # 2. V√©rification synchronisation Keycloak
        self.check_keycloak_sync()
        
        # 3. √âtat de la base de donn√©es
        self.check_database_state()
        
        # 4. Logs d'erreur r√©cents
        self.check_recent_errors()
        
        # 5. R√©sum√© final
        self.final_summary()
    
    def test_auditlog_correction(self):
        """Test de la correction AuditLog"""
        self.stdout.write("\n" + "="*50)
        self.stdout.write(self.style.WARNING("üìã 1. TEST CORRECTION AUDITLOG"))
        self.stdout.write("="*50)
        
        factory = RequestFactory()
        tests_passed = 0
        
        # Test utilisateur anonyme
        try:
            anonymous_user = AnonymousUser()
            request = factory.get('/test/')
            request.user = anonymous_user
            request.session = {}
            request.META = {'REMOTE_ADDR': '127.0.0.1', 'HTTP_USER_AGENT': 'Diagnostic'}
            
            result = AuditLog.log_action(
                utilisateur=anonymous_user,
                type_action=AuditLog.TypeAction.LECTURE_DONNEES,
                description="Diagnostic - test anonyme",
                request=request,
                niveau_risque=AuditLog.NiveauRisque.FAIBLE
            )
            
            if result and result.utilisateur is None:
                self.stdout.write(self.style.SUCCESS("‚úÖ Utilisateur anonyme: OK"))
                tests_passed += 1
            else:
                self.stdout.write(self.style.ERROR("‚ùå Utilisateur anonyme: √âCHEC"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur anonyme: {e}"))
        
        # Test utilisateur None
        try:
            request = factory.get('/test/')
            request.user = None
            request.session = {}
            request.META = {'REMOTE_ADDR': '127.0.0.1', 'HTTP_USER_AGENT': 'Diagnostic'}
            
            result = AuditLog.log_action(
                utilisateur=None,
                type_action=AuditLog.TypeAction.LECTURE_DONNEES,
                description="Diagnostic - test None",
                request=request,
                niveau_risque=AuditLog.NiveauRisque.FAIBLE
            )
            
            if result and result.utilisateur is None:
                self.stdout.write(self.style.SUCCESS("‚úÖ Utilisateur None: OK"))
                tests_passed += 1
            else:
                self.stdout.write(self.style.ERROR("‚ùå Utilisateur None: √âCHEC"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur None: {e}"))
        
        # Nettoyage
        try:
            AuditLog.objects.filter(description__icontains="Diagnostic").delete()
        except:
            pass
        
        self.stdout.write(f"üìä Tests AuditLog: {tests_passed}/2 r√©ussis")
        return tests_passed == 2
    
    def check_keycloak_sync(self):
        """V√©rification synchronisation Keycloak"""
        self.stdout.write("\n" + "="*50)
        self.stdout.write(self.style.WARNING("üîÑ 2. SYNCHRONISATION KEYCLOAK"))
        self.stdout.write("="*50)
        
        try:
            # V√©rifier que le module de sync automatique existe
            import comptes.keycloak_auto_sync
            self.stdout.write(self.style.SUCCESS("‚úÖ Module synchronisation automatique: OK"))
            
            # V√©rifier les signaux Django
            from django.db.models.signals import post_save
            from comptes.models import Utilisateur
            
            receivers = post_save._live_receivers(sender=Utilisateur)
            if any('keycloak' in str(receiver) for receiver in receivers):
                self.stdout.write(self.style.SUCCESS("‚úÖ Signaux automatiques: OK"))
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è Signaux automatiques: Non d√©tect√©s"))
                
        except ImportError:
            self.stdout.write(self.style.ERROR("‚ùå Module synchronisation: MANQUANT"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur sync: {e}"))
    
    def check_database_state(self):
        """√âtat de la base de donn√©es"""
        self.stdout.write("\n" + "="*50)
        self.stdout.write(self.style.WARNING("üóÑÔ∏è 3. √âTAT BASE DE DONN√âES"))
        self.stdout.write("="*50)
        
        try:
            # Compter les utilisateurs
            user_count = Utilisateur.objects.count()
            self.stdout.write(f"üë• Utilisateurs: {user_count}")
            
            # Compter les logs d'audit
            audit_count = AuditLog.objects.count()
            self.stdout.write(f"üìã Logs d'audit: {audit_count}")
            
            # Logs avec utilisateur None (apr√®s correction)
            anonymous_logs = AuditLog.objects.filter(utilisateur__isnull=True).count()
            self.stdout.write(f"üîì Logs anonymes: {anonymous_logs}")
            
            # Logs r√©cents
            from django.utils import timezone
            from datetime import timedelta
            recent_logs = AuditLog.objects.filter(
                date_heure__gte=timezone.now() - timedelta(hours=1)
            ).count()
            self.stdout.write(f"üìÖ Logs r√©cents (1h): {recent_logs}")
            
            self.stdout.write(self.style.SUCCESS("‚úÖ Base de donn√©es: Accessible"))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur BDD: {e}"))
    
    def check_recent_errors(self):
        """V√©rification des erreurs r√©centes"""
        self.stdout.write("\n" + "="*50)
        self.stdout.write(self.style.WARNING("üö® 4. ERREURS R√âCENTES"))
        self.stdout.write("="*50)
        
        try:
            debug_log_path = "debug.log"
            if os.path.exists(debug_log_path):
                # Lire les derni√®res lignes du debug.log
                with open(debug_log_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    
                recent_lines = lines[-50:]  # 50 derni√®res lignes
                
                # Chercher des erreurs AuditLog
                auditlog_errors = [line for line in recent_lines 
                                 if 'AuditLog.utilisateur' in line and 'AnonymousUser' in line]
                
                if auditlog_errors:
                    self.stdout.write(self.style.ERROR(f"‚ùå Erreurs AuditLog persistantes: {len(auditlog_errors)}"))
                    for error in auditlog_errors[-3:]:  # Afficher les 3 derni√®res
                        self.stdout.write(f"   {error.strip()}")
                else:
                    self.stdout.write(self.style.SUCCESS("‚úÖ Pas d'erreur AuditLog r√©cente"))
                
                # Autres erreurs
                other_errors = [line for line in recent_lines 
                              if 'ERROR' in line and 'AuditLog' not in line]
                
                if other_errors:
                    self.stdout.write(f"‚ö†Ô∏è Autres erreurs: {len(other_errors)}")
                else:
                    self.stdout.write(self.style.SUCCESS("‚úÖ Pas d'autre erreur r√©cente"))
                    
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è Fichier debug.log non trouv√©"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur lecture logs: {e}"))
    
    def final_summary(self):
        """R√©sum√© final"""
        self.stdout.write("\n" + "="*80)
        self.stdout.write(self.style.SUCCESS("üéØ R√âSUM√â DIAGNOSTIC"))
        self.stdout.write("="*80)
        
        self.stdout.write(self.style.SUCCESS("‚úÖ CORRECTIONS APPLIQU√âES:"))
        self.stdout.write("   ‚Ä¢ Fix erreur 'Cannot assign AnonymousUser to AuditLog.utilisateur'")
        self.stdout.write("   ‚Ä¢ Synchronisation automatique Django ‚Üî Keycloak")
        self.stdout.write("   ‚Ä¢ Messages d'erreur RFID sp√©cifiques")
        
        self.stdout.write(self.style.SUCCESS("\nüîß AM√âLIORATIONS SYST√àME:"))
        self.stdout.write("   ‚Ä¢ Gestion propre des utilisateurs anonymes")
        self.stdout.write("   ‚Ä¢ Audit trail complet et fonctionnel")
        self.stdout.write("   ‚Ä¢ Synchronisation transparente des profils")
        
        self.stdout.write(self.style.SUCCESS("\nüìä STATUT GLOBAL: SYST√àME OP√âRATIONNEL"))
        self.stdout.write("="*80)
