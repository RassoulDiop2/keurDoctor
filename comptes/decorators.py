from functools import wraps
from django.shortcuts import redirect
from django.contrib import messages
from django.http import HttpResponseForbidden
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from .models import Utilisateur, Medecin, Patient
import logging

logger = logging.getLogger(__name__)


def role_required(role):
    """D√©corateur pour v√©rifier le r√¥le de l'utilisateur"""
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if not request.user.is_authenticated:
                return redirect('home')
            # V√©rifier si l'utilisateur est bloqu√©
            if hasattr(request.user, 'est_bloque') and request.user.est_bloque:
                messages.error(request, f"Votre compte est bloqu√©: {request.user.raison_blocage}")
                return redirect('home')
            # V√©rifier le r√¥le (accepte variantes de groupes)
            user_groups = [group.name.lower() for group in request.user.groups.all()]
            if role == 'admin':
                valid_groups = ['admin', 'administrateurs']
            elif role == 'medecin':
                valid_groups = ['medecin', 'medecins', 'm√©decins']
            elif role == 'patient':
                valid_groups = ['patient', 'patients']
            else:
                valid_groups = [role]
            if not any(g in user_groups for g in valid_groups):
                logger.warning(f"Tentative d'acc√®s non autoris√©: {request.user.email} - R√¥le requis: {role}")
                messages.error(request, f"Acc√®s refus√©. R√¥le {role} requis.")
                return HttpResponseForbidden("Acc√®s non autoris√©")
            return view_func(request, *args, **kwargs)
        return _wrapped_view
    return decorator


def any_role_required(*roles):
    """D√©corateur pour v√©rifier que l'utilisateur a au moins un des r√¥les sp√©cifi√©s"""
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(request, *args, **kwargs):
            if not request.user.is_authenticated:
                return redirect('home')
            
            # V√©rifier si l'utilisateur est bloqu√©
            if hasattr(request.user, 'est_bloque') and request.user.est_bloque:
                messages.error(request, f"Votre compte est bloqu√©: {request.user.raison_blocage}")
                return redirect('home')
            
            # V√©rifier les r√¥les
            user_groups = [group.name.lower() for group in request.user.groups.all()]
            if not any(role in user_groups for role in roles):
                logger.warning(f"Tentative d'acc√®s non autoris√©: {request.user.email} - R√¥les requis: {roles}")
                messages.error(request, f"Acc√®s refus√©. R√¥les requis: {', '.join(roles)}")
                return HttpResponseForbidden("Acc√®s non autoris√©")
            
            return view_func(request, *args, **kwargs)
        return _wrapped_view
    return decorator


def medical_data_access_required(view_func):
    """D√©corateur pour contr√¥ler l'acc√®s aux donn√©es m√©dicales"""
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if not request.user.is_authenticated:
            return redirect('home')
        
        # V√©rifier si l'utilisateur est bloqu√©
        if hasattr(request.user, 'est_bloque') and request.user.est_bloque:
            messages.error(request, f"Votre compte est bloqu√©: {request.user.raison_blocage}")
            return redirect('home')
        
        # Seuls les m√©decins et admins peuvent acc√©der aux donn√©es m√©dicales
        user_groups = [group.name.lower() for group in request.user.groups.all()]
        if 'medecin' not in user_groups and 'admin' not in user_groups:
            logger.warning(f"Tentative d'acc√®s aux donn√©es m√©dicales: {request.user.email}")
            messages.error(request, "Acc√®s aux donn√©es m√©dicales refus√©. R√¥le m√©decin ou admin requis.")
            return HttpResponseForbidden("Acc√®s aux donn√©es m√©dicales non autoris√©")
        
        # Log de l'acc√®s aux donn√©es m√©dicales
        logger.info(f"Acc√®s aux donn√©es m√©dicales: {request.user.email} - {request.path}")
        
        return view_func(request, *args, **kwargs)
    return _wrapped_view


def patient_data_access_required(view_func):
    """D√©corateur pour contr√¥ler l'acc√®s aux donn√©es d'un patient sp√©cifique"""
    @wraps(view_func)
    def _wrapped_view(request, *args, **kwargs):
        if not request.user.is_authenticated:
            return redirect('home')
        
        # V√©rifier si l'utilisateur est bloqu√©
        if hasattr(request.user, 'est_bloque') and request.user.est_bloque:
            messages.error(request, f"Votre compte est bloqu√©: {request.user.raison_blocage}")
            return redirect('home')
        
        user_groups = [group.name.lower() for group in request.user.groups.all()]
        
        # Si c'est un patient, il ne peut voir que ses propres donn√©es
        if 'patient' in user_groups:
            patient_id = kwargs.get('patient_id')
            if patient_id and str(request.user.patient.id) != str(patient_id):
                logger.warning(f"Tentative d'acc√®s aux donn√©es d'un autre patient: {request.user.email}")
                messages.error(request, "Vous ne pouvez acc√©der qu'√† vos propres donn√©es.")
                return HttpResponseForbidden("Acc√®s non autoris√©")
        
        # Si c'est un m√©decin, v√©rifier qu'il a le droit d'acc√©der √† ce patient
        elif 'medecin' in user_groups:
            # Ici vous pouvez ajouter une logique pour v√©rifier si le m√©decin
            # a une relation avec ce patient (rendez-vous, dossier m√©dical, etc.)
            pass
        
        # Les admins ont acc√®s √† tout
        elif 'admin' not in user_groups:
            logger.warning(f"Tentative d'acc√®s non autoris√© aux donn√©es patient: {request.user.email}")
            messages.error(request, "Acc√®s refus√©.")
            return HttpResponseForbidden("Acc√®s non autoris√©")
        
        return view_func(request, *args, **kwargs)
    return _wrapped_view


def detecter_usurpation_role(view_func):
    """D√©corateur pour d√©tecter les tentatives d'usurpation de r√¥le"""
    def wrapper(request, *args, **kwargs):
        # V√©rifier si un r√¥le est simul√© dans la session
        role_simule = request.session.get('role_simule')
        
        if role_simule and role_simule != request.user.role_autorise:
            # Log de la tentative d'usurpation d√©tect√©e
            from .models import AuditLog, AlerteSecurite
            
            AuditLog.log_action(
                utilisateur=request.user,
                type_action=AuditLog.TypeAction.VIOLATION_SECURITE,
                description=f"Usurpation de r√¥le d√©tect√©e: {request.user.role_autorise} ‚Üí {role_simule}",
                request=request,
                niveau_risque=AuditLog.NiveauRisque.CRITIQUE
            )
            
            # Cr√©er une alerte de s√©curit√©
            AlerteSecurite.objects.create(
                type_alerte='VIOLATION_SECURITE',
                utilisateur_concerne=request.user,
                details=f"Usurpation de r√¥le d√©tect√©e: {request.user.role_autorise} ‚Üí {role_simule}",
                niveau_urgence='CRITIQUE',
                adresse_ip=request.META.get('REMOTE_ADDR', ''),
                user_agent=request.META.get('HTTP_USER_AGENT', '')
            )
            
            # Bloquer l'utilisateur automatiquement
            request.user.bloquer(f"Usurpation de r√¥le d√©tect√©e: {request.user.role_autorise} ‚Üí {role_simule}")
            
            # Nettoyer la session
            if 'role_simule' in request.session:
                del request.session['role_simule']
            
            return HttpResponseForbidden("üö® ALERTE S√âCURIT√â: Tentative d'usurpation de r√¥le d√©tect√©e. Votre compte a √©t√© bloqu√©.")
        
        return view_func(request, *args, **kwargs)
    return wrapper

def verifier_elevation_privileges(view_func):
    """D√©corateur pour v√©rifier les √©l√©vations de privil√®ges"""
    def wrapper(request, *args, **kwargs):
        # V√©rifier si l'utilisateur tente d'acc√©der √† des fonctionnalit√©s au-dessus de son niveau
        role_actuel = request.user.role_autorise
        url_path = request.path
        
        # D√©finir les niveaux d'acc√®s requis
        niveaux_acces = {
            'patient': ['patient'],
            'medecin': ['patient', 'medecin'],
            'admin': ['patient', 'medecin', 'admin']
        }
        
        # D√©terminer le niveau requis pour cette URL
        niveau_requis = 'patient'  # Par d√©faut
        if '/medecin/' in url_path:
            niveau_requis = 'medecin'
        elif '/admin/' in url_path or '/administration/' in url_path:
            niveau_requis = 'admin'
        
        # V√©rifier si l'utilisateur a le niveau requis
        if role_actuel not in niveaux_acces.get(niveau_requis, []):
            # Log de la tentative d'√©l√©vation
            from .models import AuditLog, AlerteSecurite
            
            AuditLog.log_action(
                utilisateur=request.user,
                type_action=AuditLog.TypeAction.VIOLATION_SECURITE,
                description=f"Tentative d'√©l√©vation de privil√®ges: {role_actuel} ‚Üí {niveau_requis}",
                request=request,
                niveau_risque=AuditLog.NiveauRisque.ELEVE
            )
            
            # Cr√©er une alerte de s√©curit√©
            AlerteSecurite.objects.create(
                type_alerte='TENTATIVE_ACCES_NON_AUTORISE',
                utilisateur_concerne=request.user,
                details=f"Tentative d'√©l√©vation de privil√®ges: {role_actuel} ‚Üí {niveau_requis}",
                niveau_urgence='HAUTE',
                adresse_ip=request.META.get('REMOTE_ADDR', ''),
                user_agent=request.META.get('HTTP_USER_AGENT', '')
            )
            
            return HttpResponseForbidden(f"‚ùå Acc√®s refus√©: Vous n'avez pas les privil√®ges requis ({niveau_requis})")
            
            return view_func(request, *args, **kwargs)
        return wrapper
