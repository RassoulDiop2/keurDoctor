#!/usr/bin/env python
"""
Script de diagnostic pour v√©rifier la base de donn√©es
"""
import os
import sys
import django
from pathlib import Path

# Configuration du chemin
BASE_DIR = Path(__file__).resolve().parent
sys.path.insert(0, str(BASE_DIR))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'keur_Doctor_app.settings')
django.setup()

from django.db import connection
from django.conf import settings

def diagnostic_database():
    """Diagnostic complet de la base de donn√©es"""
    print("üîç DIAGNOSTIC DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    # Informations de connexion
    db_settings = settings.DATABASES['default']
    print(f"üìä Base de donn√©es: {db_settings['NAME']}")
    print(f"üë§ Utilisateur: {db_settings['USER']}")
    print(f"üè† H√¥te: {db_settings['HOST']}")
    print(f"üîå Port: {db_settings['PORT']}")
    print()
    
    try:
        with connection.cursor() as cursor:
            # Test de connexion
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            
            # V√©rifier la base actuelle
            cursor.execute("SELECT current_database();")
            current_db = cursor.fetchone()[0]
            print(f"üìÇ Base de donn√©es actuelle: {current_db}")
            
            # V√©rifier le sch√©ma actuel
            cursor.execute("SELECT current_schema();")
            current_schema = cursor.fetchone()[0]
            print(f"üìÅ Sch√©ma actuel: {current_schema}")
            print()
            
            # Lister toutes les tables dans le sch√©ma public
            print("üìã TABLES DANS LE SCH√âMA PUBLIC:")
            cursor.execute("""
                SELECT table_name, table_type 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            
            tables = cursor.fetchall()
            if tables:
                print(f"Trouv√© {len(tables)} table(s):")
                for table_name, table_type in tables:
                    # Compter les enregistrements
                    try:
                        cursor.execute(f'SELECT COUNT(*) FROM "{table_name}";')
                        count = cursor.fetchone()[0]
                        print(f"  üìä {table_name} ({table_type}) - {count} enregistrement(s)")
                    except Exception as e:
                        print(f"  ‚ùå {table_name} ({table_type}) - Erreur: {e}")
            else:
                print("‚ùå Aucune table trouv√©e dans le sch√©ma 'public'")
            
            print()
            
            # V√©rifier les tables Django sp√©cifiques
            print("üîç V√âRIFICATION DES TABLES DJANGO:")
            django_tables = [
                'django_migrations',
                'comptes_utilisateur', 
                'comptes_medecin_new',
                'comptes_patient_new',
                'comptes_rendezvous',
                'comptes_consultation'
            ]
            
            for table in django_tables:
                cursor.execute("""
                    SELECT COUNT(*) 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = %s;
                """, [table])
                
                exists = cursor.fetchone()[0]
                if exists:
                    cursor.execute(f'SELECT COUNT(*) FROM "{table}";')
                    count = cursor.fetchone()[0]
                    print(f"  ‚úÖ {table} - {count} enregistrement(s)")
                else:
                    print(f"  ‚ùå {table} - Table manquante")
            
            print()
            
            # V√©rifier les migrations appliqu√©es
            print("üìù MIGRATIONS APPLIQU√âES:")
            cursor.execute("""
                SELECT app, name, applied 
                FROM django_migrations 
                WHERE app = 'comptes'
                ORDER BY applied DESC;
            """)
            
            migrations = cursor.fetchall()
            if migrations:
                for app, name, applied in migrations:
                    print(f"  ‚úÖ {app}.{name} - {applied}")
            else:
                print("  ‚ùå Aucune migration trouv√©e")
                
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        print()
        print("üí° SOLUTIONS POSSIBLES:")
        print("1. V√©rifiez que PostgreSQL est d√©marr√©")
        print("2. V√©rifiez que la base 'KeurDoctorBD' existe")
        print("3. V√©rifiez les param√®tres de connexion")
        print("4. Ex√©cutez: python manage.py migrate --run-syncdb")

if __name__ == '__main__':
    diagnostic_database()
