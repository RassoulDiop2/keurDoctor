"""
Test complet : V√©rifier que les r√¥les REALM et CLIENT sont assign√©s
Test sp√©cifique pour r√©soudre le probl√®me des r√¥les manquants
"""
import os
import sys
import django

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'keur_Doctor_app.settings')

django.setup()

from comptes.models import Utilisateur
from comptes.keycloak_auto_sync import KeycloakSyncService
import requests
from django.conf import settings

print("=" * 80)
print("üé≠ TEST COMPLET: R√îLES REALM + CLIENT + GROUPES KEYCLOAK")
print("=" * 80)

def test_keycloak_setup():
    """Test du setup automatique Keycloak"""
    print("\n1Ô∏è‚É£ SETUP AUTOMATIQUE KEYCLOAK")
    print("-" * 50)
    
    success = KeycloakSyncService.ensure_keycloak_setup()
    if success:
        print("‚úÖ Setup Keycloak r√©ussi")
        print("   üìÅ Groupes cr√©√©s: administrateurs, m√©decins, patients")
        print("   üé≠ R√¥les realm cr√©√©s: admin, medecin, patient, user")
    else:
        print("‚ùå Setup Keycloak √©chou√©")
        return False
    
    return True

def test_user_complete_sync():
    """Test de cr√©ation utilisateur avec synchronisation compl√®te"""
    print("\n2Ô∏è‚É£ CR√âATION UTILISATEUR AVEC SYNC COMPL√àTE")
    print("-" * 50)
    
    test_email = "test.roles.complet@keurdoctor.com"
    
    # Supprimer l'utilisateur de test s'il existe
    try:
        existing_user = Utilisateur.objects.get(email=test_email)
        existing_user.delete()
        print(f"üßπ Utilisateur test existant supprim√©")
    except Utilisateur.DoesNotExist:
        pass
    
    # Cr√©er un utilisateur m√©decin pour test complet
    try:
        new_user = Utilisateur.objects.create_user(
            email=test_email,
            password="TestPassword123!",
            prenom="Dr. Marie",
            nom="MARTIN",
            role_autorise="medecin",
            is_staff=False,
            is_active=True
        )
        
        print(f"‚úÖ Utilisateur Django cr√©√©: {new_user.email}")
        print(f"   üé≠ R√¥le: {new_user.role_autorise}")
        
        # Attendre la synchronisation
        import time
        time.sleep(3)
        
        # V√©rifier dans Keycloak
        verification_success = verify_complete_keycloak_config(test_email, "medecin")
        
        return new_user, verification_success
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation utilisateur: {e}")
        return None, False

def verify_complete_keycloak_config(email, expected_role):
    """V√©rifier que l'utilisateur a TOUT : profil + groupes + r√¥les realm + r√¥les client"""
    print("\n3Ô∏è‚É£ V√âRIFICATION COMPL√àTE KEYCLOAK")
    print("-" * 50)
    
    try:
        admin_token = KeycloakSyncService.get_admin_token()
        if not admin_token:
            print("‚ùå Token admin non obtenu")
            return False
        
        headers = {
            'Authorization': f'Bearer {admin_token}',
            'Content-Type': 'application/json'
        }
        
        # 1. V√©rifier l'utilisateur existe
        search_url = f"{settings.KEYCLOAK_SERVER_URL}/admin/realms/{settings.OIDC_REALM}/users?email={email}&exact=true"
        search_resp = requests.get(search_url, headers=headers, timeout=10)
        
        if search_resp.status_code != 200 or not search_resp.json():
            print(f"‚ùå Utilisateur {email} non trouv√© dans Keycloak")
            return False
        
        user_data = search_resp.json()[0]
        user_id = user_data['id']
        
        print(f"‚úÖ Utilisateur trouv√©:")
        print(f"   üìß Email: {user_data.get('email')}")
        print(f"   üë§ Nom: {user_data.get('firstName')} {user_data.get('lastName')}")
        print(f"   ‚ö° Activ√©: {user_data.get('enabled')}")
        print(f"   üìß Email v√©rifi√©: {user_data.get('emailVerified')}")
        
        # 2. V√©rifier les GROUPES
        print(f"\nüìÅ V√âRIFICATION GROUPES:")
        groups_url = f"{settings.KEYCLOAK_SERVER_URL}/admin/realms/{settings.OIDC_REALM}/users/{user_id}/groups"
        groups_resp = requests.get(groups_url, headers=headers, timeout=10)
        
        groups_ok = False
        if groups_resp.status_code == 200:
            user_groups = [group.get('name') for group in groups_resp.json()]
            expected_group = 'm√©decins' if expected_role == 'medecin' else f"{expected_role}s"
            
            print(f"   Groupes assign√©s: {user_groups}")
            
            if expected_group in user_groups:
                print(f"   ‚úÖ Groupe correct: {expected_group}")
                groups_ok = True
            else:
                print(f"   ‚ùå Groupe {expected_group} MANQUANT")
        
        # 3. V√©rifier les R√îLES REALM
        print(f"\nüé≠ V√âRIFICATION R√îLES REALM:")
        realm_roles_url = f"{settings.KEYCLOAK_SERVER_URL}/admin/realms/{settings.OIDC_REALM}/users/{user_id}/role-mappings/realm"
        realm_roles_resp = requests.get(realm_roles_url, headers=headers, timeout=10)
        
        realm_roles_ok = False
        if realm_roles_resp.status_code == 200:
            user_realm_roles = [role.get('name') for role in realm_roles_resp.json()]
            expected_realm_roles = ['user', expected_role, 'offline_access']
            
            print(f"   R√¥les realm assign√©s: {user_realm_roles}")
            
            missing_realm_roles = []
            for expected in expected_realm_roles:
                if expected not in user_realm_roles:
                    missing_realm_roles.append(expected)
            
            if not missing_realm_roles:
                print(f"   ‚úÖ Tous les r√¥les realm pr√©sents")
                realm_roles_ok = True
            else:
                print(f"   ‚ùå R√¥les realm MANQUANTS: {missing_realm_roles}")
        
        # 4. V√©rifier les R√îLES CLIENT
        print(f"\nüîß V√âRIFICATION R√îLES CLIENT:")
        client_id = settings.OIDC_RP_CLIENT_ID
        
        # R√©cup√©rer l'UUID du client
        clients_url = f"{settings.KEYCLOAK_SERVER_URL}/admin/realms/{settings.OIDC_REALM}/clients"
        clients_resp = requests.get(clients_url, headers=headers, timeout=10)
        
        client_uuid = None
        if clients_resp.status_code == 200:
            for client in clients_resp.json():
                if client.get('clientId') == client_id:
                    client_uuid = client['id']
                    break
        
        client_roles_ok = False
        if client_uuid:
            client_roles_url = f"{settings.KEYCLOAK_SERVER_URL}/admin/realms/{settings.OIDC_REALM}/users/{user_id}/role-mappings/clients/{client_uuid}"
            client_roles_resp = requests.get(client_roles_url, headers=headers, timeout=10)
            
            if client_roles_resp.status_code == 200:
                user_client_roles = [role.get('name') for role in client_roles_resp.json()]
                expected_client_roles = ['user', expected_role]
                
                print(f"   R√¥les client assign√©s: {user_client_roles}")
                
                missing_client_roles = []
                for expected in expected_client_roles:
                    if expected not in user_client_roles:
                        missing_client_roles.append(expected)
                
                if not missing_client_roles:
                    print(f"   ‚úÖ Tous les r√¥les client pr√©sents")
                    client_roles_ok = True
                else:
                    print(f"   ‚ùå R√¥les client MANQUANTS: {missing_client_roles}")
        else:
            print(f"   ‚ö†Ô∏è Client {client_id} non trouv√©")
        
        # 5. R√âSULTAT FINAL
        print(f"\nüìä R√âSUM√â V√âRIFICATION:")
        print(f"   Profil utilisateur: ‚úÖ")
        print(f"   Groupes: {'‚úÖ' if groups_ok else '‚ùå'}")
        print(f"   R√¥les realm: {'‚úÖ' if realm_roles_ok else '‚ùå'}")
        print(f"   R√¥les client: {'‚úÖ' if client_roles_ok else '‚ùå'}")
        
        complete_success = groups_ok and realm_roles_ok and client_roles_ok
        
        if complete_success:
            print(f"\nüéØ SUCC√àS COMPLET: Utilisateur peut se connecter!")
        else:
            print(f"\n‚ùå CONFIGURATION INCOMPL√àTE: Probl√®mes d√©tect√©s")
        
        return complete_success
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
        return False

def cleanup_test_user(email):
    """Nettoyer l'utilisateur de test"""
    try:
        # Django
        user = Utilisateur.objects.get(email=email)
        user.delete()
        print(f"üßπ Utilisateur Django nettoy√©")
        
        # Keycloak
        admin_token = KeycloakSyncService.get_admin_token()
        if admin_token:
            headers = {'Authorization': f'Bearer {admin_token}'}
            
            search_url = f"{settings.KEYCLOAK_SERVER_URL}/admin/realms/{settings.OIDC_REALM}/users?email={email}&exact=true"
            search_resp = requests.get(search_url, headers=headers, timeout=10)
            
            if search_resp.status_code == 200 and search_resp.json():
                user_id = search_resp.json()[0]['id']
                delete_url = f"{settings.KEYCLOAK_SERVER_URL}/admin/realms/{settings.OIDC_REALM}/users/{user_id}"
                delete_resp = requests.delete(delete_url, headers=headers, timeout=10)
                
                if delete_resp.status_code in (200, 204):
                    print(f"üßπ Utilisateur Keycloak nettoy√©")
                    
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur nettoyage: {e}")

if __name__ == "__main__":
    try:
        # 1. Setup Keycloak
        setup_ok = test_keycloak_setup()
        
        if setup_ok:
            # 2. Test utilisateur complet
            user, verification_ok = test_user_complete_sync()
            
            print("\n" + "=" * 80)
            if verification_ok:
                print("üèÜ R√âSULTAT: CORRECTION R√îLES R√âUSSIE!")
                print("=" * 80)
                print("‚úÖ R√¥les REALM assign√©s correctement")
                print("‚úÖ R√¥les CLIENT assign√©s correctement")
                print("‚úÖ Groupes Keycloak assign√©s correctement")
                print("‚úÖ L'utilisateur peut maintenant se connecter!")
                print("‚úÖ Plus de probl√®me d'authentification OIDC")
            else:
                print("‚ùå R√âSULTAT: PROBL√àMES PERSISTENT")
                print("=" * 80)
                print("‚ùå Des r√¥les ou groupes sont encore manquants")
                print("‚ùå V√©rifiez les logs ci-dessus pour les d√©tails")
            
            # Nettoyage
            if user:
                print(f"\nüßπ Nettoyage...")
                cleanup_test_user(user.email)
        else:
            print("‚ùå Setup Keycloak √©chou√© - impossible de continuer")
        
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()

print("\nAppuyez sur Entr√©e pour continuer...")
input()
